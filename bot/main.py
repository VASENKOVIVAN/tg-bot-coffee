import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
import gspread
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials
from loguru import logger
import requests


logger.add("bot/logs/debug.log", format="{time} {level} {message}", level="DEBUG", rotation="10 MB", compression="zip")

TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
TELEGRAM_PAYMENTS_PROVIDER_TOKEN = os.getenv("TELEGRAM_PAYMENTS_PROVIDER_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ JSON
gc = gspread.service_account(filename='keys/—Åredentials.json')

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
sh = gc.open_by_url('https://docs.google.com/spreadsheets/d/1AwXXCO4_LIyls0nAh-DaOuD81C6rAIIdk6iSrLROkmY/edit#gid=0')

scope = ['https://www.googleapis.com/auth/spreadsheets', "https://www.googleapis.com/auth/drive"]

credentials = ServiceAccountCredentials.from_json_keyfile_name("keys/—Åredentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open_by_url('https://docs.google.com/spreadsheets/d/1AwXXCO4_LIyls0nAh-DaOuD81C6rAIIdk6iSrLROkmY').worksheet("–ú–µ–Ω—é").get_values()
df =  pd.DataFrame.from_dict(sheet)

sheet_dobavki = client.open_by_url('https://docs.google.com/spreadsheets/d/1AwXXCO4_LIyls0nAh-DaOuD81C6rAIIdk6iSrLROkmY').worksheet("–î–æ–±–∞–≤–∫–∏").get_values()
df_dobavki =  pd.DataFrame.from_dict(sheet_dobavki)

TOKEN = '6276457543:AAFGKiu224xSr9wgTB_pp-DU8hOB4n2N_IA'

TEXT_START = """
üôåüèº –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–π –∫–æ—Ñ–µ–π–Ω–µ
üëçüèΩ –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–¥–∞–≤–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∑–µ–ª–µ–Ω–æ–π –≥–∞–ª–æ—á–∫–æ–π –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é
‚òïÔ∏è –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –≤—Å–µ, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä—è–º–æ —Ç—É—Ç
üéØ –ú–æ–∂–Ω–æ –µ—â–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –±–µ–∑ –æ–ø–ª–∞—Ç—ã, –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö (—Ç—Å—Å..)
"""

bot = Bot(TOKEN)
dp = Dispatcher(bot=bot)

photo = 'https://bobycafe.com/uploads/menu//01_%D0%9A%D0%BE%D1%84%D0%B5/%D0%BA%D0%BE%D1%84%D0%B5.png'

ikb_start = InlineKeyboardMarkup(row_width=1)
ib1_start = InlineKeyboardButton(text='‚úÖ –Ø—Å–Ω–æ, –¥–∞–ª—å—à–µ', callback_data='main_menu')
ikb_start.add(ib1_start)






@logger.catch
def send_to_telegram(message):

    apiToken = TELEGRAM_API_TOKEN
    chatID = TELEGRAM_CHAT_ID
    apiURL = f'https://api.telegram.org/bot{apiToken}/sendMessage'

    try:
        response = requests.get(apiURL, json={'chat_id': chatID, 'text': message})
        print(response.text)
    except Exception as e:
        print(e)



@logger.catch
def create_order(callback):
    print("\n\n–≠—Ç–æ —Å—Ç–æ–ª–±–µ—Ü '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' [–µ–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏, ...]")
    print('–ö–æ–ª–±—ç–∫:', callback.data)

    global df
    df =  pd.DataFrame.from_dict(sheet)

    # –ë–µ—Ä—É –≤—Å–µ ID, –∫–æ—Ç–æ—Ä—ã–µ TRUE
    data_level_category_id = list(df.loc[(df[1] == 'TRUE')][0])
    print('–í—Å–µ ID\n:')
    print(data_level_category_id)

    # –ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è
    data_level_category_name = list(df.loc[(df[1] == 'TRUE')][2])
    print('–í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è:')
    print(data_level_category_name)

    # –î–µ–ª–∞—é ZIP
    # [('‚òïÔ∏è –ù–∞–ø–∏—Ç–∫–∏', '1'), ('‚òïÔ∏è –ù–∞–ø–∏—Ç–∫–∏', '2'), ('ü•ê –ï–¥–∞', '37')]
    data_level_category_zip = list(zip(data_level_category_name, data_level_category_id))
    print('ZIP:')
    print(data_level_category_zip)

    # –î–µ–ª–∞—é —Å–ª–æ–≤–∞—Ä—å –∏–∑ ZIP
    data_level_category_dict = dict(data_level_category_zip)
    print('–°–ª–æ–≤–∞—Ä—å –∏–∑ ZIP:')
    print(data_level_category_dict)

    # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—é –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    drinkables_list_category = []

    # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏
    for n in data_level_category_dict:
        drinkables_list_category.append([InlineKeyboardButton(text=f'{n}', callback_data=f'L0#{data_level_category_dict[n]}')])

    # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    drinkables_list_category.append([
        InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data='main_menu_back'),
        InlineKeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data='basket')
    ])

    # –°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    ikb_drinkables_category = InlineKeyboardMarkup(inline_keyboard=drinkables_list_category)

    return bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_drinkables_category)


@logger.catch
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name


    

    await bot.send_message(chat_id=user_id,
                           text=f'ü§òüèº –ü—Ä–∏–≤–µ—Ç, {user_full_name}!\n{TEXT_START}',
                           reply_markup=ikb_start)


@logger.catch
@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):

    ikb = InlineKeyboardMarkup(row_width=1)
    ib1 = InlineKeyboardButton(text='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑',
                               callback_data='order')
    ib2 = InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã',
                               callback_data='order_check')
    
    ikb.add(ib1, ib2)
    user_id = message.from_user.id

    await bot.send_photo(chat_id=user_id,
                         photo=photo,
                         reply_markup=ikb)

    # await bot.send_message(chat_id=user_id,
    #                        text='Heloo World!',
    #                        reply_markup=ikb)


# pre checkout  (must be answered in 10 seconds)
@logger.catch
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@logger.catch
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")


@logger.catch
@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –ö–æ–Ω—Ç–∞–∫—Ç—ã)
    if callback.data[:9] == 'main_menu':

        ikb_main_menu = InlineKeyboardMarkup(row_width=1)
        ib1_main_menu = InlineKeyboardButton(text='üìú –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='create_order')
        ib2_main_menu = InlineKeyboardButton(text='üìå –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts')
        ikb_main_menu.add(ib1_main_menu, ib2_main_menu)

        if callback.data == 'main_menu_back':
            await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_main_menu)
        else:
            await callback.bot.send_photo(chat_id=callback.message.chat.id,
                                    photo=photo,
                                    reply_markup=ikb_main_menu)
            

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ (—Å—Ç–æ–ª–±–µ—Ü '–ö–∞—Ç–µ–≥–æ—Ä–∏—è') [–µ–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏, ...]
    elif callback.data == 'create_order':
        await create_order(callback)


    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ -> –ù–∞–ø–∏—Ç–∫–∏ (—Å—Ç–æ–ª–±–µ—Ü '–ù–∞–∑–≤–∞–Ω–∏–µ') [–∫–∞–ø—É—á–∏–Ω–æ, –ª–∞—Ç—Ç–µ, ...]
    elif callback.data[:3] == 'L0#':

        print("\n\n–≠—Ç–æ —Å—Ç–æ–ª–±–µ—Ü '–ù–∞–∑–≤–∞–Ω–∏–µ' [–∫–∞–ø—É—á–∏–Ω–æ, –ª–∞—Ç—Ç–µ, ...]")
        print('–ö–æ–ª–±—ç–∫:', callback.data)

        print('–ü—Ä–∏–Ω—è—Ç—ã–π ID –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ–Ω—é:', callback.data[3:len(callback.data)])

        # –ü–æ–ª—É—á–∞—é –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –Ω–∞–∑–≤–∞–Ω–∏–µ
        level_0_get_name = list(df.loc[(df[0] == callback.data[3:len(callback.data)])][2])
        print('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ ID:')
        print(level_0_get_name[0])

        # –ë–µ—Ä—É –≤—Å–µ ID, –∫–æ—Ç–æ—Ä—ã–µ TRUE
        data_level_0_id = list(df.loc[(df[1] == 'TRUE')&(df[2] == level_0_get_name[0])][0])
        print('–ë–µ—Ä—É –≤—Å–µ ID, –∫–æ—Ç–æ—Ä—ã–µ TRUE:')
        print(data_level_0_id)

        # –ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è
        data_level_0_name = list(df.loc[(df[1] == 'TRUE')&(df[2] == level_0_get_name[0])][3])
        print('–ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è:')
        print(data_level_0_name)

        # –ë–µ—Ä—É —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –µ—Å–ª–∏ —Ç–∞–º –ø—É—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É —á–µ—Ä–µ–∑ —Å—Ç–æ–ª–±–µ—Ü
        data_level_0_name_next = list(df.loc[(df[1] == 'TRUE')&(df[2] == level_0_get_name[0])][4])
        print('–ë–µ—Ä—É —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:')
        print(data_level_0_name_next)

        # –î–µ–ª–∞—é ZIP –ø–æ ID –∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É
        # [('1', ''), ('2', ''), ('3', ''), ('4', ''), ('5', '–õ–∞—Ç—Ç–µ –∫–ª–∞—Å–∏—á–µ—Å–∫–∏–π'), ('6', '–õ–∞—Ç—Ç–µ –∫–ª–∞—Å–∏—á–µ—Å–∫–∏–π')]
        data_level_0_zip0 = list(zip(data_level_0_id, data_level_0_name_next))
        print('–î–µ–ª–∞—é ZIP –ø–æ ID –∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É:')
        print(data_level_0_zip0)

        # –î–µ–ª–∞—é ZIP –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É –∏ –ø–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É ZIP (–ø–æ ID –∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É)
        # [('–ö–∞–ø—É—á–∏–Ω–æ', ('1', '')), ('–ö–∞–ø—É—á–∏–Ω–æ', ('2', '')), ('–§–ª—ç—Ç —É–∞–π—Ç', ('4', '')), ('–õ–∞—Ç—Ç–µ', ('5', '–õ–∞—Ç—Ç–µ –∫–ª–∞—Å–∏—á–µ—Å–∫–∏–π'))]
        data_level_0_zip = list(zip(data_level_0_name, data_level_0_zip0))
        print('–î–µ–ª–∞—é ZIP –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É –∏ –ø–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É ZIP (–ø–æ ID –∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É):')
        print(data_level_0_zip)

        # –î–µ–ª–∞—é —Å–ª–æ–≤–∞—Ä—å –∏–∑ ZIP
        # {'–ö–∞–ø—É—á–∏–Ω–æ': ('3', ''), '–§–ª—ç—Ç —É–∞–π—Ç': ('4', ''), '–õ–∞—Ç—Ç–µ': ('16', '–õ–∞—Ç—Ç–µ –∫–ª–µ–Ω–æ–≤—ã–π –º–∞–Ω–≥–æ')}
        data_level_0_dict = dict(data_level_0_zip)
        print('–°–ª–æ–≤–∞—Ä—å –∏–∑ ZIP:')
        print(data_level_0_dict)

        # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—é –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        drinkables_list = []

        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏
        for n in data_level_0_dict:
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –Ω–∞ 1 –ª–≤–ª, –∏–Ω–∞—á–µ –Ω–∞ 2 —Å—Ä–∞–∑—É
            if data_level_0_dict[n][1]:
                drinkables_list.append([InlineKeyboardButton(text=f'{n}', callback_data=f'L1#{data_level_0_dict[n][0]}')])
            else:
                drinkables_list.append([InlineKeyboardButton(text=f'{n}', callback_data=f'L2#{data_level_0_dict[n][0]}')])


        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        drinkables_list.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data='create_order')])

        # –°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ikb_drinkables = InlineKeyboardMarkup(inline_keyboard=drinkables_list)

        await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_drinkables)


    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ -> –ù–∞–ø–∏—Ç–∫–∏ -> –õ–∞—Ç—Ç–µ (—Å—Ç–æ–ª–±–µ—Ü '–¢–∏–ø') [–õ–∞—Ç—Ç–µ –∫–ª–∞—Å–∏—á–µ—Å–∫–∏–π, –õ–∞—Ç—Ç–µ –ª–µ–º–æ–Ω–≥—Ä–∞—Å—Å, –õ–∞—Ç—Ç–µ –∫–ª–µ–Ω–æ–≤—ã–π –º–∞–Ω–≥–æ, ...]
    elif callback.data[:3] == 'L1#':

        print("\n\n–≠—Ç–æ —Å—Ç–æ–ª–±–µ—Ü '–¢–∏–ø' [–õ–∞—Ç—Ç–µ –∫–ª–∞—Å–∏—á–µ—Å–∫–∏–π, –õ–∞—Ç—Ç–µ –ª–µ–º–æ–Ω–≥—Ä–∞—Å—Å, –õ–∞—Ç—Ç–µ –∫–ª–µ–Ω–æ–≤—ã–π –º–∞–Ω–≥–æ, ...]")
        print('–ö–æ–ª–±—ç–∫:', callback.data)

        print('–ü—Ä–∏–Ω—è—Ç—ã–π ID –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ–Ω—é:', callback.data[3:len(callback.data)])

        # –ü–æ–ª—É—á–∞—é –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –Ω–∞–∑–≤–∞–Ω–∏–µ
        level_1_get_name = list(df.loc[(df[0] == callback.data[3:len(callback.data)])][3])
        print('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ ID:')
        print(level_1_get_name[0])

        # –ë–µ—Ä—É –≤—Å–µ ID, –∫–æ—Ç–æ—Ä—ã–µ TRUE
        data_level_1_id = list(df.loc[(df[1] == 'TRUE')&(df[3] == level_1_get_name[0])][0])
        print('–ë–µ—Ä—É –≤—Å–µ ID, –∫–æ—Ç–æ—Ä—ã–µ TRUE:')
        print(data_level_1_id)

        # –ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è
        data_level_1_name = list(df.loc[(df[1] == 'TRUE')&(df[3] == level_1_get_name[0])][4])
        print('–ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è:')
        print(data_level_1_name)

        # –î–µ–ª–∞—é zip [('–ö–∞–ø—É—á–∏–Ω–æ', '1'), ('–ö–∞–ø—É—á–∏–Ω–æ', '2'), ('–ö–∞–ø—É—á–∏–Ω–æ', '3'), ('–§–ª—ç—Ç —É–∞–π—Ç', '4')]
        data_level_1_zip = list(zip(data_level_1_name, data_level_1_id))
        print('L1 - Zip:\n', data_level_1_zip)

        # –î–µ–ª–∞—é —Å–ª–æ–≤–∞—Ä—å –∏–∑ zip
        data_level_1_dict = dict(data_level_1_zip)
        print('L1 - Dict:\n', data_level_1_dict)


        # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—é –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        drinkables_list_1 = []

        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏
        for n in data_level_1_dict:
            drinkables_list_1.append([InlineKeyboardButton(text=f'{n}', callback_data=f'L2#{callback.data[3:]}#{data_level_1_dict[n]}')])
        # print(drinkables_list_1)
        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        drinkables_list_1.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data='create_order')])

        ikb_drinkables_1 = InlineKeyboardMarkup(inline_keyboard=drinkables_list_1)

        await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_drinkables_1)


    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ -> –ù–∞–ø–∏—Ç–∫–∏ -> –õ–∞—Ç—Ç–µ -> –ö–ª–µ–Ω–æ–≤—ã–π –ª–∞—Ç—Ç–µ (—Å—Ç–æ–ª–±–µ—Ü '–û–±—ä–µ–º') [0.2 –º–ª., 0.3 –º–ª., 0.4 –º–ª., ...]
    elif callback.data[:2] == 'L2':

        print("\n\n–≠—Ç–æ —Å—Ç–æ–ª–±–µ—Ü '–û–±—ä–µ–º' [0.2 –º–ª., 0.3 –º–ª., 0.4 –º–ª., ...]")
        print('–ö–æ–ª–±—ç–∫:', callback.data)

        print('–ü—Ä–∏–Ω—è—Ç—ã–π ID –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ–Ω—é:', callback.data[3:len(callback.data)])

        # –†–∞–∑–±–∏–≤–∞—é –∫–æ–ª–±—ç–∫ ['L2', '16', '10']
        level_2_name = callback.data.split('#')
        print('–†–∞–∑–±–∏–≤–∞—é –∫–æ–ª–±—ç–∫:')
        print(level_2_name)

        if callback.data.count('#') == 2:
            column_jump = 4
        else:
            column_jump = 3

        # –ü–æ–ª—É—á–∞—é –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –Ω–∞–∑–≤–∞–Ω–∏–µ
        level_2_get_name = list(df.loc[(df[0] == level_2_name[-1])][column_jump])
        print('–ü–æ–ª—É—á–∞—é –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –Ω–∞–∑–≤–∞–Ω–∏–µ:')
        print(level_2_get_name[0])

        # –ë–µ—Ä—É –≤—Å–µ ID, –∫–æ—Ç–æ—Ä—ã–µ TRUE
        data_level_2_id = list(df.loc[(df[1] == 'TRUE')&(df[column_jump] == level_2_get_name[0])][0])
        print('–ë–µ—Ä—É –≤—Å–µ ID, –∫–æ—Ç–æ—Ä—ã–µ TRUE:')
        print(data_level_2_id)

        # –ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è
        data_level_2_name = list(df.loc[(df[1] == 'TRUE')&(df[column_jump] == level_2_get_name[0])][5])
        print('–ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è')
        print(data_level_2_name)

        if data_level_2_name == ['']:
            data_level_2_name = list(df.loc[(df[1] == 'TRUE')&(df[column_jump] == level_2_get_name[0])][4])
            print('–ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞:')
            print(data_level_2_name)

        # –ë–µ—Ä—É —Ü–µ–Ω—ã
        data_level_2_price = list(df.loc[(df[1] == 'TRUE')&(df[column_jump] == level_2_get_name[0])][6])
        print('–ë–µ—Ä—É —Ü–µ–Ω—ã')
        print(data_level_2_price)

        # –î–µ–ª–∞—é ZIP –ø–æ —Ü–µ–Ω–µ –∏ ID
        # [('320', '23'), ('330', '24')]
        data_level_2_zip_0 = list(zip(data_level_2_price, data_level_2_id))
        print('–î–µ–ª–∞—é ZIP –ø–æ —Ü–µ–Ω–µ –∏ ID')
        print(data_level_2_zip_0)

        # –î–µ–ª–∞—é ZIP –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É –∏ –ø–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É ZIP (–ø–æ —Ü–µ–Ω–µ –∏ ID)
        # [('0.3 –º–ª.', ('320', '23')), ('0.4 –º–ª.', ('330', '24'))]
        data_level_2_zip_1 = list(zip(data_level_2_name, data_level_2_zip_0))
        print('–î–µ–ª–∞—é ZIP –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–æ–ª–±—Ü—É –∏ –ø–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É ZIP (–ø–æ —Ü–µ–Ω–µ –∏ ID)')
        print(data_level_2_zip_1)

        # –î–µ–ª–∞—é —Å–ª–æ–≤–∞—Ä—å –∏–∑ ZIP
        # {'0.3 –º–ª.': ('320', '23'), '0.4 –º–ª.': ('330', '24')}
        data_level_2_dict = dict(data_level_2_zip_1)
        print('–°–ª–æ–≤–∞—Ä—å –∏–∑ ZIP:')
        print(data_level_2_dict)

        # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—é –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        tesstt_level_2 = []






        level_2_get_name_next = list(df.loc[(df[0] == level_2_name[-1])][7])
        print('–ü—Ä–æ–≤–µ—Ä—è—é —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü:')
        print(level_2_get_name_next)


        if level_2_get_name_next == ['']:
            # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏
            for n in data_level_2_dict:
                tesstt_level_2.append([InlineKeyboardButton(text=f'{n} ({data_level_2_dict[n][0]}‚ÇΩ)', callback_data=f'ATK#{callback.data[3:]}#{data_level_2_dict[n][1]}')])
        else:
            # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏
            for n in data_level_2_dict:
                tesstt_level_2.append([InlineKeyboardButton(text=f'{n} ({data_level_2_dict[n][0]}‚ÇΩ)', callback_data=f'L3#{callback.data[3:]}#{data_level_2_dict[n][1]}')])


        print('len(level_2_name)', len(level_2_name))
        if len(level_2_name) == 2:
            back_to_L1 = '#'.join(level_2_name)[3:]
            # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            tesstt_level_2.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data=f'L0#{back_to_L1}')])
        else:
            back_to_L1 = '#'.join(level_2_name[:-1])[3:]
            # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            tesstt_level_2.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data=f'L1#{back_to_L1}')])





        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        # tesstt_level_2.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data='drinkables')])

        ikb_drinkables_level_2 = InlineKeyboardMarkup(inline_keyboard=tesstt_level_2)

        await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_drinkables_level_2)


    # –°—é–¥–∞ –ø—Ä–∏—Ö–æ–∂—É –∏–∑ 'level_2'
    elif callback.data[:2] == 'L3':

        level_3_name = callback.data.split('#')
        
        print('\n–≠–¢–û 3 –õ–í–õ')
        
        print('–ö–æ–ª–±—ç–∫:',callback.data)
        print('ID:', level_3_name[-1])

        # –ü–æ–ª—É—á–∞—é –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –Ω–∞–∑–≤–∞–Ω–∏–µ
        level_3_get_name = list(df.loc[(df[0] == level_3_name[-1])][7])
        level_3_get_price = list(df.loc[(df[0] == level_3_name[-1])][8])

        # –ü–æ–ª—É—á–∞—é –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
        data_level_3_dict = level_3_get_name[0].split(', ')

        print("—Ç—É—Ç - ", data_level_3_dict)
        level_3_get_name_1 = []
        level_3_get_name_2 = []

        for n in data_level_3_dict:
            print('n = ', n)
            # –ü–æ–ª—É—á–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ
            level_3_get_name_1 += list(df_dobavki.loc[(df_dobavki[1] == "TRUE")&(df_dobavki[2] == n)][2])
            # –ü–æ–ª—É—á–∞—é ID
            level_3_get_name_2 += list(df_dobavki.loc[(df_dobavki[1] == "TRUE")&(df_dobavki[2] == n)][0])


        print(level_3_get_name_1)
        print(level_3_get_name_2)

        but_dict = dict(zip(level_3_get_name_1,level_3_get_name_2))
        
        
        # –ü–æ–ª—É—á–∞—é –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –Ω–∞–∑–≤–∞–Ω–∏–µ
        level_3_get_name = list(df.loc[(df[0] == level_3_name[-1])][6])

        # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—é –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        tesstt_level_3 = []

        tesstt_level_3.append([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'ATK#{callback.data[3:]}')])

        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏
        for n in but_dict:
            tesstt_level_3.append([InlineKeyboardButton(text=f'{n}', callback_data=f'L4#{callback.data[3:]}D{but_dict[n]}')])

        back_to_L2 = '#'.join(level_3_name[:-1])[3:]

        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        tesstt_level_3.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data=f'L2#{back_to_L2}')])

        ikb_drinkables_level_3 = InlineKeyboardMarkup(inline_keyboard=tesstt_level_3)

        await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_drinkables_level_3)


    # –°—é–¥–∞ –ø—Ä–∏—Ö–æ–∂—É –∏–∑ 'level_3' 
    elif callback.data[:2] == 'L4':
        level_4_name = callback.data.split('D')
        print('\n–≠–¢–û 4 –õ–í–õ')
        print('–ö–æ–ª–±—ç–∫:',callback.data)
        
        # –ü–æ–ª—É—á–∞—é –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –Ω–∞–∑–≤–∞–Ω–∏–µ
        level_4_get_name = list(df_dobavki.loc[(df_dobavki[0] == level_4_name[-1])][2])[-1]
        print('L4 - name:\n',level_4_get_name)
        # –ë–µ—Ä—É ID
        data_level_4_id = list(df_dobavki.loc[(df_dobavki[1] == 'TRUE')&(df_dobavki[2] == level_4_get_name)][0])
        print('L4 - ID:\n', data_level_4_id)
        # –ë–µ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è
        data_level_4_name = list(df_dobavki.loc[(df_dobavki[1] == 'TRUE')&(df_dobavki[2] == level_4_get_name)][3])
        print('L4 - –°–ø–∏—Å–æ–∫:\n', data_level_4_name)
        # –ë–µ—Ä—É —Ü–µ–Ω—ã
        data_level_4_price = list(df_dobavki.loc[(df_dobavki[1] == 'TRUE')&(df_dobavki[2] == level_4_get_name)][4])
        print('L2 - –°–ø–∏—Å–æ–∫ —Ü–µ–Ω:\n', data_level_4_price)
        # –î–µ–ª–∞—é zip [('–ö–∞–ø—É—á–∏–Ω–æ', '1'), ('–ö–∞–ø—É—á–∏–Ω–æ', '2'), ('–ö–∞–ø—É—á–∏–Ω–æ', '3'), ('–§–ª—ç—Ç —É–∞–π—Ç', '4')]
        data_level_4_zip_0 = list(zip(data_level_4_price, data_level_4_id))
        # –î–µ–ª–∞—é zip [('–ö–∞–ø—É—á–∏–Ω–æ', '1'), ('–ö–∞–ø—É—á–∏–Ω–æ', '2'), ('–ö–∞–ø—É—á–∏–Ω–æ', '3'), ('–§–ª—ç—Ç —É–∞–π—Ç', '4')]
        data_level_4_zip_1 = list(zip(data_level_4_name, data_level_4_zip_0))
        print('L2 - Zip:\n', data_level_4_zip_1)
        # –î–µ–ª–∞—é —Å–ª–æ–≤–∞—Ä—å –∏–∑ zip
        data_level_4_dict = dict(data_level_4_zip_1)
        print('L2 - Dict:\n', data_level_4_dict)

        # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—é –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        tesstt_level_4 = []

        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏
        for n in data_level_4_dict:
            tesstt_level_4.append([InlineKeyboardButton(text=f'{n} ({data_level_4_dict[n][0]}‚ÇΩ)', callback_data=f'ATK#{callback.data[3:]}#{data_level_4_dict[n][1]}')])
        
        back_to_L1 = '#'.join(level_4_name[:-1])[3:]

        # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        tesstt_level_4.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data=f'L1#{back_to_L1}')])

        ikb_drinkables_level_4 = InlineKeyboardMarkup(inline_keyboard=tesstt_level_4)

        await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_drinkables_level_4)


    # –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
    elif callback.data[:3] == 'ATK':

        user_id = callback.from_user.id

        print("\n–í –∫–æ—Ä–∑–∏–Ω–µ –∫–æ–ª–±—ç–∫: ", callback.data)
        

        if 'D' in callback.data:
                     
            id_product = callback.data.split('D')[0].split('#')[-1]
            print('\nID —Ç–æ–≤–∞—Ä–∞:', id_product)
            name_product = list(df.loc[(df[0] == id_product)][9])[0]
            print('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', name_product)
            price_product = int(list(df.loc[(df[0] == id_product)][6])[0])
            print('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:', price_product)


            print('\n–î–æ–ø –µ—Å—Ç—å')

            id_product_dop = callback.data.split('D')[-1].split('#')[-1]
            print('ID –¥–æ–ø–∞:', id_product_dop)
            # data_ATK_dop_id = df_dobavki.loc[(df_dobavki[0] == id_dop)]
            # print('–°—Ç—Ä–æ–∫–∞ –¥–æ–ø–∞: ', data_ATK_dop_id)
            name_product_dop = list(df_dobavki.loc[(df_dobavki[0] == id_product_dop)][3])[0]
            print('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–∞:', name_product_dop)
            price_product_dop = int(list(df_dobavki.loc[(df_dobavki[0] == id_product_dop)][4])[0])
            print('–¶–µ–Ω–∞ –¥–æ–ø–∞:', price_product_dop)

        else:    
            id_product = callback.data.split('#')[-1]
            print('\nID —Ç–æ–≤–∞—Ä–∞:', id_product)
            name_product = list(df.loc[(df[0] == id_product)][9])[0]
            print('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', name_product)
            price_product = int(list(df.loc[(df[0] == id_product)][6])[0])
            print('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:', price_product)

        with sqlite3.connect('db/database.db') as db:
            cursor = db.cursor()

            if 'D' in callback.data:
                query = f"INSERT INTO basket (user_id, title, price) VALUES ({user_id}, '{name_product}', '{price_product*100}'), ({user_id}, '{name_product_dop}', '{price_product_dop*100}');"
            else:
                query = f"INSERT INTO basket (user_id, title, price) VALUES ({user_id}, '{name_product}', '{price_product*100}');"

            cursor.execute(query)
            print("\n–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚Äã‚Äã–≤ —Ç–∞–±–ª–∏—Ü—É basket ", cursor.rowcount)
            cursor.close()

        await callback.answer(text="–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")

        # drinkables_list_category123 =[]
        # # –î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        # drinkables_list_category123.append([
        #     InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='create_order')
        # ])
        await create_order(callback)

        # ikb_drinkables_category123 = InlineKeyboardMarkup(inline_keyboard=drinkables_list_category123)

        # await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_drinkables_category123)


        # await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_start)


    # –ö–æ—Ä–∑–∏–Ω–∞
    elif callback.data == 'basket':

        user_id = callback.from_user.id

        buttonstest = []

        with sqlite3.connect('db/database.db') as db:
            cursor = db.cursor()

            query = f"SELECT * FROM basket WHERE user_id={user_id}"
            data = cursor.execute(query)

            for tovar in data:
                print(tovar)
                buttonstest.append([InlineKeyboardButton(text=f'{tovar[2]} ({int(tovar[3])/100}‚ÇΩ)', callback_data='dfsgs')])

            cursor.close()

        if buttonstest:
            buttonstest.append([
                InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data='create_order'),
                InlineKeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å', callback_data='deletekorzina'),
                InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='oplatazakaza')
            ])
        else:
            buttonstest.append([InlineKeyboardButton(text='–ö–û–†–ó–ò–ù–ê –ü–£–°–¢–ê–Ø', callback_data='nothing')])
            buttonstest.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data='create_order')])
            
        ikb_basket = InlineKeyboardMarkup(inline_keyboard=buttonstest)

        await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_basket)


    # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    elif callback.data == 'deletekorzina':

        user_id = callback.from_user.id

        with sqlite3.connect('db/database.db') as db:
            cursor = db.cursor()
            query = f"DELETE FROM basket WHERE user_id={user_id}"
            data = cursor.execute(query)

            for tovar in data:
                print('–£–¥–∞–ª–µ–Ω–æ:\n', tovar)

            cursor.close()    
        
        await callback.answer(
                text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞"
            )

        buttonstest = []

        buttonstest.append([InlineKeyboardButton(text='–ö–û–†–ó–ò–ù–ê –ü–£–°–¢–ê–Ø', callback_data='nothing')])
        buttonstest.append([InlineKeyboardButton(text='üëàüèº –ù–∞–∑–∞–¥', callback_data='create_order')])
        ikb_basket = InlineKeyboardMarkup(inline_keyboard=buttonstest)

        await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=ikb_basket)
    

    # –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
    elif callback.data == 'oplatazakaza':

        user_id = callback.from_user.id

        if TELEGRAM_PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(callback.message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

        corzinka_oplata = []
        description_invoice = []

        with sqlite3.connect('db/database.db') as db:
            cursor = db.cursor()

            query = f"SELECT * FROM basket WHERE user_id={user_id}"
            data = cursor.execute(query)

            for tovar in data:
                print('—Ç—É—Ç' , tovar)
                price = int(tovar[3])
                corzinka_oplata.append(types.LabeledPrice(label=f'{tovar[2]}', amount=price))

            cursor.close()


        send_to_tg = ''
        send_to_tg_price = 0


        for i, tovar in enumerate(corzinka_oplata):
            print(f'{i+1}. {tovar["label"]} ({tovar["amount"]/100} —Ä.)\n', )
            send_to_tg += f'{i+1}. {tovar["label"]} ({tovar["amount"]/100} —Ä.)\n'
            send_to_tg_price += tovar["amount"]/100
        
        send_to_telegram(f"üìù –ù–û–í–´–ô –ó–ê–ö–ê–ó\nüß∏ –ö–ª–∏–µ–Ω—Ç id: {user_id}\n\n{send_to_tg}\nüíµ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {send_to_tg_price} —Ä.")

        await bot.send_invoice(callback.message.chat.id,
                                title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
                                description="–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ",
                                provider_token=TELEGRAM_PAYMENTS_PROVIDER_TOKEN,
                                currency="rub",
                                # photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                                # photo_width=416,
                                # photo_height=234,
                                # photo_size=416,
                                is_flexible=False,
                                prices=corzinka_oplata,
                                start_parameter="one-month-subscription",
                                payload="test-invoice-payload")
        
        await callback.answer('')


    else:
        await callback.answer(
                text="–≠—Ç–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
    # executor.start_polling(dp)